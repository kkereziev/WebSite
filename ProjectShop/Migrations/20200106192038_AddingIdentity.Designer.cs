// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProjectShop.Data;

namespace ProjectShop.Migrations
{
    [DbContext(typeof(ProjectShopContext))]
    [Migration("20200106192038_AddingIdentity")]
    partial class AddingIdentity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ProjectShop.Models.Accessories.Bags.Bags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Bags");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Bags.ColorsOfBags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfBag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.ToTable("ColorsOfBags");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Bags.MaterialsOfBags", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BagId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialOfBag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BagId");

                    b.ToTable("MaterialsOfBags");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Belts.Belts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Belts");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Belts.ColorsOfBelts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BeltId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfBelt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeltId");

                    b.ToTable("ColorsOfBelts");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Belts.MaterialOfBelts", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BeltId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialOfBelt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BeltId");

                    b.ToTable("MaterialOfBelts");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Gloves.ColorsOfGloves", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfGloves")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("GlovesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GlovesId");

                    b.ToTable("ColorsOfGloves");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Gloves.Gloves", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Gloves");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Gloves.MaterialOfGloves", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GlovesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaterialsOfGloves")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GlovesId");

                    b.ToTable("MaterialOfGloves");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Jewelry.CategoryOfJewelry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryOfJewel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("JewelryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("JewelryId");

                    b.ToTable("CategoryOfJewelry");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Jewelry.Jewelry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Jewelry");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Watches.StylesOfWatches", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StyleOfWatch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WatchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WatchId");

                    b.ToTable("StylesOfWatches");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Watches.Watches", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Watches");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Blouse.Blouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Blouse");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Blouse.BlouseColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfBlouse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("BlouseColor");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Blouse.BlouseModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BlouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BlouseId");

                    b.ToTable("BlouseModel");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Blouse.BlouseSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfBlouse")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("BlouseSize");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Coat.Coat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Coat");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Coat.CoatColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfCoat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("CoatColor");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Coat.CoatModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CoatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoatId");

                    b.ToTable("CoatModel");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Coat.CoatSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfCoat")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("CoatSize");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Dress.Dress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Dress");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Dress.DressColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfDress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("DressColor");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Dress.DressModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DressId");

                    b.ToTable("DressModel");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Dress.DressSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfDress")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("DressSize");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Panths.Panths", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Panths");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Panths.PanthsColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfPanths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PanthsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PanthsId");

                    b.ToTable("PanthsColor");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Panths.PanthsSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PanthsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfPanths")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PanthsId");

                    b.ToTable("PanthsSize");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Shirt.Shirt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Shirt");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Shirt.ShirtColor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfShirt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShirtId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShirtId");

                    b.ToTable("ShirtColor");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Shirt.ShirtSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShirtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfShirt")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShirtId");

                    b.ToTable("ShirtSize");
                });

            modelBuilder.Entity("ProjectShop.Models.Discounts.Discount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Discount");
                });

            modelBuilder.Entity("ProjectShop.Models.New_Collection.NewCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("NewCollection");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Boots.Boots", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DiscountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Boots");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Boots.BootsModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BootsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BootsId");

                    b.ToTable("BootsModel");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Boots.ColorOfBoots", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("_ColorOfBoots")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("ColorOfBoots");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Boots.SizeOfBoots", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfBoot")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.ToTable("SizeOfBoots");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.CasualShoes.CasualShoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("CasualShoes");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.CasualShoes.ColorOfCasualShoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CasualShoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfShoe")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CasualShoesId");

                    b.ToTable("ColorOfCasualShoes");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.CasualShoes.SizeOfCasualShoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfShoe")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShoesId");

                    b.ToTable("SizeOfCasualShoes");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.HighHeeledShoes.HighHeeledShoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("HighHeeledShoes");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.HighHeeledShoes.HighHeeledShoesColors", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfShoe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("HighHeeledShoeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HighHeeledShoesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HighHeeledShoesId");

                    b.ToTable("HighHeeledShoesColors");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.HighHeeledShoes.HighHeeledShoesSize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfShoe")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShoesId");

                    b.ToTable("HighHeeledShoesSize");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Sandals.ColorOfSandals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfSandal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SandalsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SandalsId");

                    b.ToTable("ColorOfSandals");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Sandals.Sandals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Sandals");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Sandals.SizeOfSandals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SandalsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfSandal")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SandalsId");

                    b.ToTable("SizeOfSandals");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Slippers.ColorOfSlippers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfSlipper")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SlippersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SlippersId");

                    b.ToTable("ColorOfSlippers");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Slippers.SizeOfSlippers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfSlipper")
                        .HasColumnType("int");

                    b.Property<Guid>("SlippersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SlippersId");

                    b.ToTable("SizeOfSlippers");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Slippers.Slippers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Slippers");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.SportShoes.ColorOfShoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ColorOfShoe")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ShoesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShoesId");

                    b.ToTable("ColorOfShoes");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.SportShoes.SizeOfShoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShoesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("SizeOfShoe")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShoesId");

                    b.ToTable("SizeOfShoes");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.SportShoes.Sport_Shoes", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Brand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DiscountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NewCollectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DiscountsId");

                    b.HasIndex("NewCollectionId");

                    b.ToTable("Sport_Shoes");
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Bags.Bags", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Bags")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("Bags")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Bags.ColorsOfBags", b =>
                {
                    b.HasOne("ProjectShop.Models.Accessories.Bags.Bags", "Bag")
                        .WithMany("Colors")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Bags.MaterialsOfBags", b =>
                {
                    b.HasOne("ProjectShop.Models.Accessories.Bags.Bags", "Bag")
                        .WithMany("Material")
                        .HasForeignKey("BagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Belts.Belts", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Belts")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("Belts")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Belts.ColorsOfBelts", b =>
                {
                    b.HasOne("ProjectShop.Models.Accessories.Belts.Belts", "Belt")
                        .WithMany("Colors")
                        .HasForeignKey("BeltId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Belts.MaterialOfBelts", b =>
                {
                    b.HasOne("ProjectShop.Models.Accessories.Belts.Belts", "Belt")
                        .WithMany("Material")
                        .HasForeignKey("BeltId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Gloves.ColorsOfGloves", b =>
                {
                    b.HasOne("ProjectShop.Models.Accessories.Gloves.Gloves", "Gloves")
                        .WithMany("Colors")
                        .HasForeignKey("GlovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Gloves.Gloves", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Gloves")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("Gloves")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Gloves.MaterialOfGloves", b =>
                {
                    b.HasOne("ProjectShop.Models.Accessories.Gloves.Gloves", "Gloves")
                        .WithMany("Material")
                        .HasForeignKey("GlovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Jewelry.CategoryOfJewelry", b =>
                {
                    b.HasOne("ProjectShop.Models.Accessories.Jewelry.Jewelry", "Jewelry")
                        .WithMany("Category")
                        .HasForeignKey("JewelryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Jewelry.Jewelry", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Jewelry")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("Jewelry")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Watches.StylesOfWatches", b =>
                {
                    b.HasOne("ProjectShop.Models.Accessories.Watches.Watches", "Watch")
                        .WithMany("Styles")
                        .HasForeignKey("WatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Accessories.Watches.Watches", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Watches")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("Watches")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Blouse.Blouse", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", null)
                        .WithMany("Blouses")
                        .HasForeignKey("DiscountId");

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", null)
                        .WithMany("Blouses")
                        .HasForeignKey("NewCollectionId");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Blouse.BlouseColor", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Blouse.BlouseModel", "Model")
                        .WithMany("Colors")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Blouse.BlouseModel", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Blouse.Blouse", "Blouse")
                        .WithMany("Models")
                        .HasForeignKey("BlouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Blouse.BlouseSize", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Blouse.BlouseModel", "Model")
                        .WithMany("Size")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Coat.Coat", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", null)
                        .WithMany("Coats")
                        .HasForeignKey("DiscountId");

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", null)
                        .WithMany("Coats")
                        .HasForeignKey("NewCollectionId");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Coat.CoatColor", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Coat.CoatModel", "Model")
                        .WithMany("Colors")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Coat.CoatModel", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Coat.Coat", "Coat")
                        .WithMany("Models")
                        .HasForeignKey("CoatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Coat.CoatSize", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Coat.CoatModel", "Model")
                        .WithMany("Size")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Dress.Dress", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", null)
                        .WithMany("Dresses")
                        .HasForeignKey("DiscountId");

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", null)
                        .WithMany("Dresses")
                        .HasForeignKey("NewCollectionId");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Dress.DressColor", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Dress.DressModel", "Model")
                        .WithMany("Colors")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Dress.DressModel", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Dress.Dress", "Dress")
                        .WithMany("Models")
                        .HasForeignKey("DressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Dress.DressSize", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Dress.DressModel", "Model")
                        .WithMany("Size")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Panths.Panths", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Pants")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("Pants")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Panths.PanthsColor", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Panths.Panths", "Panths")
                        .WithMany("Colors")
                        .HasForeignKey("PanthsId");
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Panths.PanthsSize", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Panths.Panths", "Panths")
                        .WithMany("Size")
                        .HasForeignKey("PanthsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Shirt.Shirt", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Shirts")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollections")
                        .WithMany("Shirts")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Shirt.ShirtColor", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Shirt.Shirt", "Shirt")
                        .WithMany("Colors")
                        .HasForeignKey("ShirtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Clothes.Shirt.ShirtSize", b =>
                {
                    b.HasOne("ProjectShop.Models.Clothes.Shirt.Shirt", "Shirt")
                        .WithMany("Size")
                        .HasForeignKey("ShirtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Boots.Boots", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", null)
                        .WithMany("Boots")
                        .HasForeignKey("DiscountId");

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", null)
                        .WithMany("Boots")
                        .HasForeignKey("NewCollectionId");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Boots.BootsModel", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.Boots.Boots", "Boots")
                        .WithMany("Models")
                        .HasForeignKey("BootsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Boots.ColorOfBoots", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.Boots.BootsModel", "Model")
                        .WithMany("Colors")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Boots.SizeOfBoots", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.Boots.BootsModel", "Model")
                        .WithMany("Size")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.CasualShoes.CasualShoes", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("CasualShoes")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("CasualShoes")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.CasualShoes.ColorOfCasualShoes", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.CasualShoes.CasualShoes", "CasualShoes")
                        .WithMany("Colors")
                        .HasForeignKey("CasualShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.CasualShoes.SizeOfCasualShoes", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.CasualShoes.CasualShoes", "Shoes")
                        .WithMany("Size")
                        .HasForeignKey("ShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.HighHeeledShoes.HighHeeledShoes", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("HighHeeledShoes")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("HighHeeledShoes")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.HighHeeledShoes.HighHeeledShoesColors", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.HighHeeledShoes.HighHeeledShoes", "HighHeeledShoes")
                        .WithMany("Colors")
                        .HasForeignKey("HighHeeledShoesId");
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.HighHeeledShoes.HighHeeledShoesSize", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.HighHeeledShoes.HighHeeledShoes", "Shoes")
                        .WithMany("Size")
                        .HasForeignKey("ShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Sandals.ColorOfSandals", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.Sandals.Sandals", "Sandals")
                        .WithMany("Colors")
                        .HasForeignKey("SandalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Sandals.Sandals", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Sandals")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("Sandals")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Sandals.SizeOfSandals", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.Sandals.Sandals", "Sandals")
                        .WithMany("Size")
                        .HasForeignKey("SandalsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Slippers.ColorOfSlippers", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.Slippers.Slippers", "Slippers")
                        .WithMany("Colors")
                        .HasForeignKey("SlippersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Slippers.SizeOfSlippers", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.Slippers.Slippers", "Slippers")
                        .WithMany("Size")
                        .HasForeignKey("SlippersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.Slippers.Slippers", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("Slippers")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("Slippers")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.SportShoes.ColorOfShoes", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.SportShoes.Sport_Shoes", "Shoes")
                        .WithMany("Colors")
                        .HasForeignKey("ShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.SportShoes.SizeOfShoes", b =>
                {
                    b.HasOne("ProjectShop.Models.Shoes.SportShoes.Sport_Shoes", "Shoes")
                        .WithMany("Size")
                        .HasForeignKey("ShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectShop.Models.Shoes.SportShoes.Sport_Shoes", b =>
                {
                    b.HasOne("ProjectShop.Models.Discounts.Discount", "Discounts")
                        .WithMany("SportShoes")
                        .HasForeignKey("DiscountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectShop.Models.New_Collection.NewCollection", "NewCollection")
                        .WithMany("SportShoes")
                        .HasForeignKey("NewCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
